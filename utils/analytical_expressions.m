

pdefactor =  @(R, Xsource, D, koff, kappa) ((-1).*(D.*koff).^(1/2)+kappa+exp(1).^(2.*(D.^(-1).*koff).^(1/2).* ...
    R).*((D.*koff).^(1/2)+kappa)).^(-1).*((-1).*(D.*koff).^(1/2)+ ...
    kappa+(-1).*exp(1).^((D.^(-1).*koff).^(1/2).*(R+(-1).*Xsource)).* ...
    kappa+(-1).*exp(1).^((D.^(-1).*koff).^(1/2).*(R+Xsource)).*kappa+ ...
    exp(1).^(2.*(D.^(-1).*koff).^(1/2).*R).*((D.*koff).^(1/2)+kappa));


uu = @(x, R, Xsource, D, koff, kappa) (1/2).*exp(1).^((-1).*(D.^(-1).*koff).^(1/2).*(2.*R+x+Xsource)).*( ...
    D.*koff).^(-1/2).*((D.*koff).^(1/2)+kappa).^(-1).*(D.*((-1)+exp(1) ...
    .^(4.*(D.^(-1).*koff).^(1/2).*R)).*koff+kappa.*(2.*(D.*koff).^( ...
    1/2)+(-1).*kappa+exp(1).^(4.*(D.^(-1).*koff).^(1/2).*R).*(2.*(D.* ...
    koff).^(1/2)+kappa))).^(-1).*((-1).*kappa.^2.*(exp(1).^(2.*(D.^( ...
    -1).*koff).^(1/2).*(R+Xsource)).*((D.*koff).^(1/2)+(-1).*kappa)+ ...
    exp(1).^(4.*(D.^(-1).*koff).^(1/2).*R).*((D.*koff).^(1/2)+kappa)+ ...
    exp(1).^(2.*(D.^(-1).*koff).^(1/2).*(2.*R+x+Xsource)).*((D.*koff) ...
    .^(1/2)+kappa)+(-1).*exp(1).^(2.*(D.^(-1).*koff).^(1/2).*(3.*R+x)) ...
    .*(3.*(D.*koff).^(1/2)+kappa))+D.*koff.*(exp(1).^(2.*(D.^(-1).* ...
    koff).^(1/2).*(R+Xsource)).*((D.*koff).^(1/2)+(-1).*kappa)+exp(1) ...
    .^(4.*(D.^(-1).*koff).^(1/2).*R).*((D.*koff).^(1/2)+kappa)+exp(1) ...
    .^(2.*(D.^(-1).*koff).^(1/2).*(2.*R+x+Xsource)).*((D.*koff).^(1/2) ...
    +kappa)+exp(1).^(2.*(D.^(-1).*koff).^(1/2).*(3.*R+x)).*((D.*koff) ...
    .^(1/2)+3.*kappa))+(-1).*(exp(1).^(2.*(D.^(-1).*koff).^(1/2).*(R+ ...
    x))+(-1).*exp(1).^(2.*(D.^(-1).*koff).^(1/2).*(R+Xsource))).*( ...
    kappa.^2.*((D.*koff).^(1/2)+(-1).*kappa+exp(1).^(4.*(D.^(-1).* ...
    koff).^(1/2).*R).*(3.*(D.*koff).^(1/2)+kappa))+D.*koff.*((-1).*( ...
    D.*koff).^(1/2)+kappa+exp(1).^(4.*(D.^(-1).*koff).^(1/2).*R).*(( ...
    D.*koff).^(1/2)+3.*kappa))).*heaviside(x+(-1).*Xsource));


rescaled_uu = @(x, R, Xsource, D, kon, koff, kappa,ron, roff) ((kon*ron)./(ron+roff)).*uu(x, R, Xsource, D, koff, kappa);

ron_eff = @(R, Xsource, D, kon, koff, kappa, ron, roff)  pdefactor(R, Xsource, D, koff, kappa).*ron./koff;
roff_eff = @(R, Xsource, D,kon, koff, kappa, ron, roff) pdefactor(R, Xsource, D, koff, kappa).*roff./koff;
ksyn_eff = @(R, Xsource, D,kon, koff, kappa, ron, roff) pdefactor(R, Xsource, D, koff, kappa).*kon./koff;


mean_predict = @(R, Xsource, D, kon, koff, kappa, ron, roff) ksyn_eff(R, Xsource, D, kon, koff, kappa, ron, roff).*...
    (ron_eff(R, Xsource, D, kon, koff, kappa, ron, roff) ./(ron_eff(R, Xsource, D, kon, koff, kappa, ron, roff)+roff_eff(R, Xsource, D, kon, koff, kappa, ron, roff)));

var_predict = @(R, Xsource, D, kon, koff, kappa, ron, roff) ...
    mean_predict(R, Xsource, D, kon, koff, kappa, ron, roff) + ...
    ((ron_eff(R, Xsource, D, kon, koff, kappa, ron, roff).*roff_eff(R, Xsource, D, kon, koff, kappa, ron, roff))./ ...
    ((ron_eff(R, Xsource, D, kon, koff, kappa, ron, roff) ...
    +roff_eff(R, Xsource, D, kon, koff, kappa, ron, roff)).^2)).*...
    (ksyn_eff(R, Xsource, D, kon, koff, kappa, ron, roff).^2./(ron_eff(R, Xsource, D, kon, koff, kappa, ron, roff)+roff_eff(R, Xsource, D, kon, koff, kappa, ron, roff)+1));

